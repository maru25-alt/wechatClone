{"version":3,"sources":["webpack:///./node_modules/libphonenumber-js/build/format.js","webpack:///./node_modules/libphonenumber-js/build/extension.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/util.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/utf-8.js","webpack:///./node_modules/libphonenumber-js/build/metadata.js","webpack:///./node_modules/libphonenumber-js/build/getNumberType.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/LRUCache.js","webpack:///./node_modules/libphonenumber-js/build/findPhoneNumbers_.js","webpack:///./node_modules/libphonenumber-js/build/AsYouType.js","webpack:///./node_modules/libphonenumber-js/build/isValidNumberForRegion.js","webpack:///./node_modules/libphonenumber-js/build/format_.js","webpack:///./node_modules/libphonenumber-js/build/isPossibleNumber.js","webpack:///./src/views/Signup.vue?dd92","webpack:///./src/util/IntlTelephone.vue?426a","webpack:///./src/util/assets/validate.js","webpack:///src/util/IntlTelephone.vue","webpack:///./src/util/IntlTelephone.vue?944a","webpack:///./src/util/IntlTelephone.vue","webpack:///src/views/Signup.vue","webpack:///./src/views/Signup.vue?2b13","webpack:///./src/views/Signup.vue","webpack:///./node_modules/libphonenumber-js/build/findPhoneNumbersInText.js","webpack:///./node_modules/libphonenumber-js/build/getCountries.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers.js","webpack:///./node_modules/libphonenumber-js/build/PhoneNumberMatcher.js","webpack:///./node_modules/libphonenumber-js/build/isViablePhoneNumber.js","webpack:///./node_modules/libphonenumber-js/build/ParseError.js","webpack:///./node_modules/libphonenumber-js/build/parsePhoneNumber.js","webpack:///./node_modules/core-js/modules/es.regexp.constructor.js","webpack:///./node_modules/libphonenumber-js/build/IDD.js","webpack:///./node_modules/libphonenumber-js/build/parse_.js","webpack:///./node_modules/libphonenumber-js/build/validate.js","webpack:///./node_modules/libphonenumber-js/build/searchPhoneNumbersInText.js","webpack:///./node_modules/libphonenumber-js/build/tools/semver-compare.js","webpack:///./node_modules/libphonenumber-js/build/getCountryCallingCode.js","webpack:///./node_modules/libphonenumber-js/build/parseDigits.js","webpack:///./node_modules/libphonenumber-js/build/getExampleNumber.js","webpack:///./node_modules/libphonenumber-js/build/findPhoneNumbers.js","webpack:///./node_modules/libphonenumber-js/build/parsePhoneNumberFromString_.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/RegExpCache.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/isValidCandidate.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers_.js","webpack:///./node_modules/libphonenumber-js/build/searchNumbers.js","webpack:///./node_modules/libphonenumber-js/build/parsePhoneNumberFromString.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/Leniency.js","webpack:///./node_modules/libphonenumber-js/build/parse.js","webpack:///./node_modules/libphonenumber-js/build/util.js","webpack:///./node_modules/libphonenumber-js/build/PhoneNumber.js","webpack:///./node_modules/libphonenumber-js/build/RFC3966.js","webpack:///./node_modules/libphonenumber-js/build/getNumberType_.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/isValidPreCandidate.js","webpack:///./node_modules/libphonenumber-js/build/formatIncompletePhoneNumber.js","webpack:///./node_modules/libphonenumber-js/custom.js","webpack:///./node_modules/libphonenumber-js/build/isPossibleNumber_.js","webpack:///./node_modules/libphonenumber-js/build/constants.js","webpack:///./node_modules/libphonenumber-js/build/validate_.js","webpack:///./node_modules/libphonenumber-js/build/parseIncompletePhoneNumber.js","webpack:///./node_modules/libphonenumber-js/build/findNumbers/parsePreCandidate.js","webpack:///./node_modules/libphonenumber-js/build/parsePhoneNumber_.js","webpack:///./node_modules/libphonenumber-js/build/isValidNumberForRegion_.js"],"names":["Object","defineProperty","exports","value","formatNumber","_format_","_interopRequireDefault","_parse_","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","Array","isArray","_normalizeArguments","normalizeArguments","arguments","input","format","options","metadata","args","_Array$prototype$slic","slice","call","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","arg_5","defaultCountry","extended","Error","is_object","_","extractExtension","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERNS_FOR_PARSING","_constants","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","VALID_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERN","RegExp","number","start","search","number_without_extension","matches","match","ext","limit","lower","upper","concat","trimAfterFirstMatch","regexp","string","index","startsWith","substring","indexOf","endsWith","isLatinLetter","isInvalidPunctuationSymbol","_pL","pNd","_pN","PZ","pZ","_pZ","_pNd","pL","pL_regexp","_pSc","pSc","pSc_regexp","_pMn","pMn","pMn_regexp","_InBasic_Latin","_InLatin_1_Supplement","_InLatin_Extended_A","_InLatin_Extended_Additional","_InLatin_Extended_B","_InCombining_Diacritical_Marks","latinLetterRegexp","letter","test","character","validateMetadata","getExtPrefix","getCountryCallingCode","isSupportedCountry","_semverCompare","default","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","V3","V4","DEFAULT_EXT_PREFIX","Metadata","this","setVersion","keys","countries","filter","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","join","type_of","countryCallingCode","version","v4","getNumberType","_isViablePhoneNumber","_getNumberType_","Node","prev","LRUCache","size","head","tail","cache","ensureLimit","node","remove","put","console","log","findPhoneNumbers","searchPhoneNumbers","PhoneNumberSearch","_extension","_parsePreCandidate","_isValidPreCandidate","_isValidCandidate","_defineProperty","VALID_PHONE_NUMBER","PLUS_CHARS","VALID_PUNCTUATION","WHITESPACE_IN_THE_BEGINNING_PATTERN","WHITESPACE","PUNCTUATION_IN_THE_END_PATTERN","text","phones","hasNext","exec","startsAt","replace","result","parseCandidate","find","phone","endsAt","state","last_match","stripNonPairedParens","cutAndStripNonPairedParens","closeNonPairedParens","countOccurences","repeat","DIGIT_PLACEHOLDER","_metadata","_PhoneNumber","_IDD","_parseDigits","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER_MATCHER","NATIONAL_PREFIX_SEPARATORS_PATTERN","SUPPORT_LEGACY_FORMATTING_PATTERNS","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_FORMATTED_PHONE_NUMBER_PART","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","USE_NON_GEOGRAPHIC_COUNTRY_CODE","AsYouType","optionsOrDefaultCountry","defaultCallingCode","isNonGeographicCallingCode","reset","formattedOutput","international","internationalPrefix","digits","nationalNumberDigits","carrierCode","setCountry","chosenFormat","template","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","hasSelectedNumberingPlan","initializePhoneNumberFormatsForCountry","matchingFormats","resetFormat","formattedDigits","extractFormattedDigits","getFullNumber","inputDigits","getNonFormattedNationalNumber","extractedNumber","extractFormattedPhoneNumber","startInternationalNumber","nextDigits","numberWithoutIDD","stripIDDPrefix","isInternational","isCountryCallingCodeAmbiguous","determineTheCountry","extractCountryCallingCode","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","formattedNumber","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","_iterator","_isArray","_ref","createFormattingTemplate","internationalFormat","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","leadingDigitsPatterns","Math","min","leadingDigitsPattern","_iterator2","_isArray2","_i2","_ref2","matcher","pattern","formattedNationalNumber","formatNationalNumberUsingFormat","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","spacing","prefix","getInternationalPrefix","_extractCountryCallin","chooseCountryByCountryCallingCode","_stripNationalPrefixA","stripNationalPrefixAndCarrierCode","nationalNumber","getTemplateForNumberFormatPattern","strictPattern","nationalNumberDummyDigits","includesNationalPrefix","numberFormat","getFormatFormat","numberFormatWithNationalPrefix","FIRST_GROUP_PATTERN","_iterator3","split","_isArray3","_i3","_ref3","digit","applyInternationalSeparatorStyle","findCountryCode","getCountry","_extractCountryCallin2","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","_stripNationalPrefixA2","stripNationalPrefixAndCarrierCodeFromCompleteNumber","shorterNationalNumber","newCarrierCode","phoneNumber","getNumber","isPossible","isValid","getNonFormattedTemplate","dangling_braces","pop","cleared_string","_i4","_dangling_braces","cutBeforeIndex","cut_before","retained_template","opening_braces","closing_braces","symbol","count","_iterator4","_isArray4","_i5","_ref4","times","hasPlus","isValidNumberForRegion","_isValidNumberForRegion_","_util","_RFC","_objectSpread","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","forEach","DEFAULT_OPTIONS","formatExtension","extension","formatNationalNumber","addExtension","formatRFC3966","fromCountry","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","useInternationalSeparator","useNationalPrefixFormattingRule","formatAs","chooseFormatForNumber","availableFormats","nationalNnumber","lastLeadingDigitsPattern","matchesEntirely","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","isPossibleNumber","_getNumberType","_isPossibleNumber_","render","_vm","_h","$createElement","_c","_self","staticClass","_l","notification","id","attrs","_v","message","$t","on","ChangeView","$event","preventDefault","handleSignupWithGoogle","passwordRules","loading","ref","model","callback","$$v","valid","expression","directives","name","rawName","domProps","composing","firstName","lastName","username","email","password","confirmpassword","agreeStmnt","disabled","handleSignupWithEmail","staticRenderFns","class","currentOptions","className","active","readonly","showConutryList","group","alphabet","code","onSelectCountry","dialCode","currentCountry","placeholder","phoneFormat","required","validatorCellphone","modelValue","parse","parseCustom","formatCustom","isValidNumber","isValidNumberCustom","getNumberTypeCustom","String","data","countriesGroups","values","flat","initOptions","separateDialCode","currentCountryCode","currentDialCode","searchValue","validatorMode","validatorStatus","computed","assign","searchRegExp","toLowerCase","mounted","methods","onSearch","newCounties","countryCopie","char","$emit","_getNumber","_getFullNumber","substr","val","_isValidNumber","component","VAlert","VForm","VIcon","findPhoneNumbersInText","getArguments","_findNumbers","getCountries","findNumbers","_findNumbers_","_parsePhoneNumber","_RegExpCache","_utf","_Leniency","_interopRequireWildcard","newObj","hasOwnProperty","desc","get","set","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","blockLimit","punctuation","digitSequence","PATTERN","LEAD_CLASS","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Number","pow","PhoneNumberMatcher","leniency","maxTries","candidate","offset","parseAndVerify","extractInnerMatch","_INNER_MATCHES","innerMatchPattern","isFirstMatch","possibleInnerMatch","_group","_match","possible","regExpCache","lastMatch","isViablePhoneNumber","MIN_LENGTH_PHONE_NUMBER_PATTERN","MIN_LENGTH_FOR_NSN","VALID_PHONE_NUMBER_PATTERN","ParseError","stack","create","parsePhoneNumber","_parsePhoneNumber_","isObject","DESCRIPTORS","global","isForced","inheritIfRequired","f","getOwnPropertyNames","isRegExp","getFlags","stickyHelpers","redefine","fails","setInternalState","setSpecies","wellKnownSymbol","MATCH","NativeRegExp","RegExpPrototype","re1","re2","CORRECT_NEW","UNSUPPORTED_Y","FORCED","RegExpWrapper","flags","sticky","thisIsRegExp","patternIsRegExp","flagsAreUndefined","proxy","it","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","countryMetadata","IDDPrefixPattern","matchedGroups","_ParseError","_parseIncompletePhoneNumber","_getCountryCallingCode","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","_parseInput","parseInput","formattedPhoneNumber","throwOnError","prefixPattern","prefixMatch","capturedGroupsCount","nationalPhoneNumber","possibleCountries","_findCountryCode","parseRFC3966","withExtensionStripped","exactCountry","checkNumberLengthForType","shorterNumber","_countryCallingCode","possibleShorterNumber","_stripNationalPrefixA3","possibleShorterNationalNumber","_stripNationalPrefixA4","_validate_","searchPhoneNumbersInText","_searchNumbers","_findPhoneNumbersInText","_default","a","b","pa","pb","na","nb","isNaN","parseDigit","parseDigits","DIGITS","getExampleNumber","examples","_findPhoneNumbers_","_normalizeArguments2","parsePhoneNumberFromString","error","_LRUCache","RegExpCache","regExp","isValidCandidate","OPENING_PARENS","CLOSING_PARENS","NON_PARENS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","previousChar","lastCharIndex","nextChar","_PhoneNumberMatcher","results","searchNumbers","_parsePhoneNumberFromString_","containsMoreThanOneSlashInNationalNumber","POSSIBLE","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","candidateString","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","candidateHasCountryCode","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","leadingDigitsRegExp","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","region","getNddPrefixForRegion","Character","isDigit","getExtension","parseNumber","regular_expression","mergeArrays","merged","element","sort","_metadata2","PhoneNumber","isCountryCode","part","_part$split","_part$split2","is_of_type","NON_FIXED_LINE_PHONE_TYPES","_NON_FIXED_LINE_PHONE","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isValidPreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","followingText","formatIncompletePhoneNumber","_AsYouType","module","parsePhoneNumberWithError","parseIncompletePhoneNumber","parsePhoneNumberCharacter","getPhoneCode","isPossiblePhoneNumber","DASHES","SLASHES","DOTS","BRACKETS","TILDES","national_number","parsePreCandidate","SECOND_NUMBER_START_PATTERN"],"mappings":"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","file":"js/chunk-8bdfcfca.5068bbca.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = formatNumber;\n\nvar _format_ = _interopRequireDefault(require(\"./format_\"));\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction formatNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      input = _normalizeArguments.input,\n      format = _normalizeArguments.format,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _format_[\"default\"])(input, format, options, metadata);\n} // Sort out arguments\n\n\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3],\n      arg_5 = _Array$prototype$slic2[4];\n\n  var input;\n  var format;\n  var options;\n  var metadata; // Sort out arguments.\n  // If the phone number is passed as a string.\n  // `format('8005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    // If country code is supplied.\n    // `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n    if (typeof arg_3 === 'string') {\n      format = arg_3;\n\n      if (arg_5) {\n        options = arg_4;\n        metadata = arg_5;\n      } else {\n        metadata = arg_4;\n      }\n\n      input = (0, _parse_[\"default\"])(arg_1, {\n        defaultCountry: arg_2,\n        extended: true\n      }, metadata);\n    } // Just an international phone number is supplied\n    // `format('+78005553535', 'NATIONAL', [options], metadata)`.\n    else {\n        if (typeof arg_2 !== 'string') {\n          throw new Error('`format` argument not passed to `formatNumber(number, format)`');\n        }\n\n        format = arg_2;\n\n        if (arg_4) {\n          options = arg_3;\n          metadata = arg_4;\n        } else {\n          metadata = arg_3;\n        }\n\n        input = (0, _parse_[\"default\"])(arg_1, {\n          extended: true\n        }, metadata);\n      }\n  } // If the phone number is passed as a parsed number object.\n  // `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n  else if (is_object(arg_1)) {\n      input = arg_1;\n      format = arg_2;\n\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      }\n    } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.'); // Legacy lowercase formats.\n\n\n  if (format === 'International') {\n    format = 'INTERNATIONAL';\n  } else if (format === 'National') {\n    format = 'NATIONAL';\n  }\n\n  return {\n    input: input,\n    format: format,\n    options: options,\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=format.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractExtension = extractExtension;\nexports.EXTN_PATTERNS_FOR_MATCHING = exports.EXTN_PATTERNS_FOR_PARSING = void 0;\n\nvar _constants = require(\"./constants\");\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext='; // Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\n\nvar CAPTURING_EXTN_DIGITS = '([' + _constants.VALID_DIGITS + ']{1,7})';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nfunction create_extension_pattern(purpose) {\n  // One-character symbols that can be used to indicate an extension.\n  var single_extension_characters = \"x\\uFF58#\\uFF03~\\uFF5E\";\n\n  switch (purpose) {\n    // For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n    // allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n    case 'parsing':\n      single_extension_characters = ',;' + single_extension_characters;\n  }\n\n  return RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + \"[ \\xA0\\\\t,]*\" + \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\" + // \"доб.\"\n  \"\\u0434\\u043E\\u0431|\" + '[' + single_extension_characters + \"]|int|anexo|\\uFF49\\uFF4E\\uFF54)\" + \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\" + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + _constants.VALID_DIGITS + ']{1,5})#';\n}\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\n\nvar EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\nexports.EXTN_PATTERNS_FOR_PARSING = EXTN_PATTERNS_FOR_PARSING;\nvar EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching'); // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nexports.EXTN_PATTERNS_FOR_MATCHING = EXTN_PATTERNS_FOR_MATCHING;\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nfunction extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var number_without_extension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i] != null && matches[i].length > 0) {\n      return {\n        number: number_without_extension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extension.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.limit = limit;\nexports.trimAfterFirstMatch = trimAfterFirstMatch;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\n\n/** Returns a regular expression quantifier with an upper and lower limit. */\nfunction limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\n\nfunction trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\n\nfunction startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\n\nfunction endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLatinLetter = isLatinLetter;\nexports.isInvalidPunctuationSymbol = isInvalidPunctuationSymbol;\nexports._pL = exports.pNd = exports._pN = exports.PZ = exports.pZ = void 0;\n// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nvar pZ = \"[\".concat(_pZ, \"]\");\nexports.pZ = pZ;\nvar PZ = \"[^\".concat(_pZ, \"]\");\nexports.PZ = PZ;\nvar _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nexports._pN = _pN;\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nvar pNd = \"[\".concat(_pNd, \"]\");\nexports.pNd = pNd;\nvar _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nexports._pL = _pL;\nvar pL = \"[\".concat(_pL, \"]\");\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = \"[\".concat(_pSc, \"]\");\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = \"[\".concat(_pMn, \"]\");\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = \"\\0-\\x7F\";\nvar _InLatin_1_Supplement = \"\\x80-\\xFF\";\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nfunction isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\n\nfunction isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMetadata = validateMetadata;\nexports.getExtPrefix = getExtPrefix;\nexports.getCountryCallingCode = getCountryCallingCode;\nexports.isSupportedCountry = isSupportedCountry;\nexports[\"default\"] = void 0;\n\nvar _semverCompare = _interopRequireDefault(require(\"./tools/semver-compare\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      this.selectNumberingPlan(null, callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexports[\"default\"] = Metadata;\n\nvar NumberingPlan =\n/*#__PURE__*/\nfunction () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format =\n/*#__PURE__*/\nfunction () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()); // Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\n      // // Check that national prefix formatting rule is not a \"dummy\" one.\n      // this.nationalPrefixFormattingRule() !== '$1' &&\n      // // Check that national prefix formatting rule actually has national prefix digit(s).\n      // // Filters out cases like \"($1)\".\n      // // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\n      // /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type =\n/*#__PURE__*/\nfunction () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nfunction validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nfunction getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\n\nfunction getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\n\nfunction isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  this.v1 = !metadata.version;\n  this.v2 = metadata.version !== undefined && (0, _semverCompare[\"default\"])(metadata.version, V3) === -1;\n  this.v3 = metadata.version !== undefined && (0, _semverCompare[\"default\"])(metadata.version, V4) === -1;\n  this.v4 = metadata.version !== undefined; // && compare(metadata.version, V5) === -1\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getNumberType;\nexports.normalizeArguments = normalizeArguments;\n\nvar _isViablePhoneNumber = _interopRequireDefault(require(\"./isViablePhoneNumber\"));\n\nvar _getNumberType_ = _interopRequireDefault(require(\"./getNumberType_\"));\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Finds out national phone number type (fixed line, mobile, etc)\nfunction getNumberType() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      input = _normalizeArguments.input,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _getNumberType_[\"default\"])(input, options, metadata);\n} // Sort out arguments\n\n\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var input;\n  var options = {};\n  var metadata; // If the phone number is passed as a string.\n  // `getNumberType('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    // If \"default country\" argument is being passed\n    // then convert it to an `options` object.\n    // `getNumberType('88005553535', 'RU', metadata)`.\n    if (_typeof(arg_2) !== 'object') {\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      } // `parse` extracts phone numbers from raw text,\n      // therefore it will cut off all \"garbage\" characters,\n      // while this `validate` function needs to verify\n      // that the phone number contains no \"garbage\"\n      // therefore the explicit `isViablePhoneNumber` check.\n\n\n      if ((0, _isViablePhoneNumber[\"default\"])(arg_1)) {\n        input = (0, _parse_[\"default\"])(arg_1, {\n          defaultCountry: arg_2\n        }, metadata);\n      } else {\n        input = {};\n      }\n    } // No \"resrict country\" argument is being passed.\n    // International phone number is passed.\n    // `getNumberType('+78005553535', metadata)`.\n    else {\n        if (arg_3) {\n          options = arg_2;\n          metadata = arg_3;\n        } else {\n          metadata = arg_2;\n        } // `parse` extracts phone numbers from raw text,\n        // therefore it will cut off all \"garbage\" characters,\n        // while this `validate` function needs to verify\n        // that the phone number contains no \"garbage\"\n        // therefore the explicit `isViablePhoneNumber` check.\n\n\n        if ((0, _isViablePhoneNumber[\"default\"])(arg_1)) {\n          input = (0, _parse_[\"default\"])(arg_1, undefined, metadata);\n        } else {\n          input = {};\n        }\n      }\n  } // If the phone number is passed as a parsed phone number.\n  // `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n  else if (is_object(arg_1)) {\n      input = arg_1;\n\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n  return {\n    input: input,\n    options: options,\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=getNumberType.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache =\n/*#__PURE__*/\nfunction () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \".concat(key));\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexports[\"default\"] = LRUCache;\n//# sourceMappingURL=LRUCache.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findPhoneNumbers;\nexports.searchPhoneNumbers = searchPhoneNumbers;\nexports.PhoneNumberSearch = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _extension = require(\"./extension\");\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nvar _parsePreCandidate = _interopRequireDefault(require(\"./findNumbers/parsePreCandidate\"));\n\nvar _isValidPreCandidate = _interopRequireDefault(require(\"./findNumbers/isValidPreCandidate\"));\n\nvar _isValidCandidate = _interopRequireDefault(require(\"./findNumbers/isValidCandidate\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copy-pasted from `./parse.js`.\nvar VALID_PHONE_NUMBER = '[' + _constants.PLUS_CHARS + ']{0,1}' + '(?:' + '[' + _constants.VALID_PUNCTUATION + ']*' + '[' + _constants.VALID_DIGITS + ']' + '){3,}' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']*';\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + _constants.WHITESPACE + ']+');\nvar PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + _constants.VALID_PUNCTUATION + ']+$'); // // Regular expression for getting opening brackets for a valid number\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\n\nvar VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\n\nfunction findPhoneNumbers(text, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  var search = new PhoneNumberSearch(text, options, metadata);\n  var phones = [];\n\n  while (search.hasNext()) {\n    phones.push(search.next());\n  }\n\n  return phones;\n}\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\n\nfunction searchPhoneNumbers(text, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  var search = new PhoneNumberSearch(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (search.hasNext()) {\n          return {\n            done: false,\n            value: search.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\n\n\nvar PhoneNumberSearch =\n/*#__PURE__*/\nfunction () {\n  // Iteration tristate.\n  function PhoneNumberSearch(text, options, metadata) {\n    _classCallCheck(this, PhoneNumberSearch);\n\n    _defineProperty(this, \"state\", 'NOT_READY');\n\n    this.text = text; // If assigning the `{}` default value is moved to the arguments above,\n    // code coverage would decrease for some weird reason.\n\n    this.options = options || {};\n    this.metadata = metadata;\n    this.regexp = new RegExp(VALID_PHONE_NUMBER + // Phone number extensions\n    '(?:' + _extension.EXTN_PATTERNS_FOR_PARSING + ')?', 'ig'); // this.searching_from = 0\n  }\n\n  _createClass(PhoneNumberSearch, [{\n    key: \"find\",\n    value: function find() {\n      var matches = this.regexp.exec(this.text);\n\n      if (!matches) {\n        return;\n      }\n\n      var number = matches[0];\n      var startsAt = matches.index;\n      number = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n      startsAt += matches[0].length - number.length; // Fixes not parsing numbers with whitespace in the end.\n      // Also fixes not parsing numbers with opening parentheses in the end.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/252\n\n      number = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');\n      number = (0, _parsePreCandidate[\"default\"])(number);\n      var result = this.parseCandidate(number, startsAt);\n\n      if (result) {\n        return result;\n      } // Tail recursion.\n      // Try the next one if this one is not a valid phone number.\n\n\n      return this.find();\n    }\n  }, {\n    key: \"parseCandidate\",\n    value: function parseCandidate(number, startsAt) {\n      if (!(0, _isValidPreCandidate[\"default\"])(number, startsAt, this.text)) {\n        return;\n      } // Don't parse phone numbers which are non-phone numbers\n      // due to being part of something else (e.g. a UUID).\n      // https://github.com/catamphetamine/libphonenumber-js/issues/213\n      // Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\n\n\n      if (!(0, _isValidCandidate[\"default\"])(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\n        return;\n      } // // Prepend any opening brackets left behind by the\n      // // `PHONE_NUMBER_START_PATTERN` regexp.\n      // const text_before_number = text.slice(this.searching_from, startsAt)\n      // const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n      // if (full_number_starts_at >= 0)\n      // {\n      // \tnumber   = text_before_number.slice(full_number_starts_at) + number\n      // \tstartsAt = full_number_starts_at\n      // }\n      //\n      // this.searching_from = matches.lastIndex\n\n\n      var result = (0, _parse_[\"default\"])(number, this.options, this.metadata);\n\n      if (!result.phone) {\n        return;\n      }\n\n      result.startsAt = startsAt;\n      result.endsAt = startsAt + number.length;\n      return result;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.last_match = this.find();\n\n        if (this.last_match) {\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.last_match;\n      this.last_match = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberSearch;\n}();\n\nexports.PhoneNumberSearch = PhoneNumberSearch;\n//# sourceMappingURL=findPhoneNumbers_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stripNonPairedParens = stripNonPairedParens;\nexports.cutAndStripNonPairedParens = cutAndStripNonPairedParens;\nexports.closeNonPairedParens = closeNonPairedParens;\nexports.countOccurences = countOccurences;\nexports.repeat = repeat;\nexports[\"default\"] = exports.DIGIT_PLACEHOLDER = void 0;\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _PhoneNumber = _interopRequireDefault(require(\"./PhoneNumber\"));\n\nvar _constants = require(\"./constants\");\n\nvar _util = require(\"./util\");\n\nvar _parse_ = require(\"./parse_\");\n\nvar _format_ = require(\"./format_\");\n\nvar _IDD = require(\"./IDD\");\n\nvar _getNumberType_ = require(\"./getNumberType_\");\n\nvar _parseDigits = _interopRequireDefault(require(\"./parseDigits\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\n\nvar DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nexports.DIGIT_PLACEHOLDER = DIGIT_PLACEHOLDER;\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\n\n\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + _constants.VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + _constants.VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\nvar VALID_PHONE_NUMBER = '(?:' + '[' + _constants.PLUS_CHARS + ']' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']*' + '|' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']+' + '.*' + '$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType =\n/*#__PURE__*/\nfunction () {\n  // Not setting `options` to a constructor argument\n  // not to break backwards compatibility\n  // for older versions of the library.\n\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    _defineProperty(this, \"options\", {});\n\n    this.metadata = new _metadata[\"default\"](metadata); // Set `defaultCountry` and `defaultCallingCode` options.\n\n    var defaultCountry;\n    var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n    if (optionsOrDefaultCountry) {\n      if (_typeof(optionsOrDefaultCountry) === 'object') {\n        defaultCountry = optionsOrDefaultCountry.defaultCountry;\n        defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n      } else {\n        defaultCountry = optionsOrDefaultCountry;\n      }\n    }\n\n    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n      this.defaultCountry = defaultCountry;\n    }\n\n    if (defaultCallingCode) {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          this.defaultCountry = '001';\n        }\n      }\n\n      this.defaultCallingCode = defaultCallingCode;\n    } // Reset.\n\n\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"reset\",\n    value: function reset() {\n      this.formattedOutput = '';\n      this.international = false;\n      this.internationalPrefix = undefined;\n      this.countryCallingCode = undefined;\n      this.digits = '';\n      this.nationalNumberDigits = '';\n      this.nationalPrefix = '';\n      this.carrierCode = '';\n      this.setCountry(this.defaultCountry, this.defaultCallingCode);\n      return this;\n    }\n  }, {\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.international;\n    }\n    /**\r\n     * Returns the \"country calling code\" part of the phone number.\r\n     * Returns `undefined` if the number is not being input in international format.\r\n     * Returns \"country calling code\" for \"non-geographic\" phone numbering plans too.\r\n     * @return {string} [countryCallingCode]\r\n     */\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.countryCallingCode;\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      // If no digits have been input yet,\n      // then `this.country` is the `defaultCountry`.\n      // Won't return the `defaultCountry` in such case.\n      if (!this.digits) {\n        return;\n      }\n\n      var countryCode = this.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (this.country === '001') {\n          countryCode = undefined;\n        }\n      }\n\n      return countryCode;\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country, callingCode) {\n      this.country = country;\n      this.metadata.selectNumberingPlan(country, callingCode);\n\n      if (this.metadata.hasSelectedNumberingPlan()) {\n        this.initializePhoneNumberFormatsForCountry();\n      } else {\n        this.matchingFormats = [];\n      }\n\n      this.resetFormat();\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var formattedDigits = this.extractFormattedDigits(text); // If the extracted phone number part\n      // can possibly be a part of some valid phone number\n      // then parse phone number characters from a formatted phone number.\n\n      if (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n        this.formattedOutput = this.getFullNumber(this.inputDigits((0, _parseDigits[\"default\"])(formattedDigits)) || this.getNonFormattedNationalNumber());\n      }\n\n      return this.formattedOutput;\n    }\n    /**\r\n     * Extracts formatted phone number digits from text (if there're any).\r\n     * @param  {string} text\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"extractFormattedDigits\",\n    value: function extractFormattedDigits(text) {\n      // Extract a formatted phone number part from text.\n      var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n      if (extractedNumber[0] === '+') {\n        // Trim the `+`.\n        extractedNumber = extractedNumber.slice('+'.length);\n\n        if (this.digits) {// If an out of position `+` is detected\n          // (or a second `+`) then just ignore it.\n        } else {\n          this.formattedOutput = '+';\n          this.startInternationalNumber();\n        }\n      }\n\n      return extractedNumber;\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.setCountry();\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits) {\n      // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n      if (!this.digits) {\n        var numberWithoutIDD = (0, _IDD.stripIDDPrefix)(nextDigits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n        if (numberWithoutIDD && numberWithoutIDD !== nextDigits) {\n          // If an IDD prefix was stripped then\n          // convert the number to international one\n          // for subsequent parsing.\n          this.internationalPrefix = nextDigits.slice(0, nextDigits.length - numberWithoutIDD.length);\n          nextDigits = numberWithoutIDD;\n          this.startInternationalNumber();\n        }\n      } // Append phone number digits.\n\n\n      this.digits += nextDigits; // Try to format the parsed input\n\n      if (this.isInternational()) {\n        if (this.countryCallingCode) {\n          this.nationalNumberDigits += nextDigits; // `this.country` could be `undefined`, for example, when there is\n          // ambiguity in a form of several different countries,\n          // each corresponding to the same country phone code\n          // (e.g. NANPA: USA, Canada, etc), and there's not enough digits\n          // to reliably determine the country the phone number belongs to.\n          // Therefore, in cases of such ambiguity, each time something is input,\n          // try to determine the country (if it hasn't been determined yet).\n\n          if (!this.country || this.isCountryCallingCodeAmbiguous()) {\n            this.determineTheCountry();\n          }\n        } else {\n          // Extract country calling code from the digits entered so far.\n          // There must be some digits in order to extract anything from them.\n          //\n          // If one looks at country phone codes\n          // then they can notice that no one country phone code\n          // is ever a (leftmost) substring of another country phone code.\n          // So if a valid country code is extracted so far\n          // then it means that this is the country code.\n          //\n          // If no country phone code could be extracted so far,\n          // then don't format the phone number.\n          //\n          if (!this.extractCountryCallingCode()) {\n            // Don't format the phone number.\n            return;\n          } // Possibly extract a national prefix.\n          // Some people incorrectly input national prefix\n          // in an international phone number.\n          // For example, some people write British phone numbers as `+44(0)...`.\n          // Also, mobile phone numbers in Mexico are supposed to be dialled\n          // internationally using a `15` national prefix.\n          //\n          // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n          //\n          // \"Dialing a Mexican cell phone from abroad\n          // When you are calling a cell phone number in Mexico from outside Mexico,\n          // it’s necessary to dial an additional “1” after Mexico’s country code\n          // (which is “52”) and before the area code.\n          // You also ignore the 045, and simply dial the area code and the\n          // cell phone’s number.\n          //\n          // If you don’t add the “1”, you’ll receive a recorded announcement\n          // asking you to redial using it.\n          //\n          // For example, if you are calling from the USA to a cell phone\n          // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n          // (Note that this is different to calling a land line in Mexico City\n          // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n          //\n\n\n          this.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length); // this.extractNationalPrefix()\n          //\n          // Determine the country from country calling code and national number.\n\n          this.determineTheCountry();\n        }\n      } else {\n        this.nationalNumberDigits += nextDigits; // If `defaultCallingCode` is set,\n        // see if the `country` could be derived.\n\n        if (!this.country) {\n          this.determineTheCountry();\n        } // Some national prefixes are substrings of other national prefixes\n        // (for the same country), therefore try to extract national prefix each time\n        // because a longer national prefix might be available at some point in time.\n\n\n        var previousNationalPrefix = this.nationalPrefix;\n        this.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits; // Re-extract national prefix.\n\n        this.extractNationalPrefix(); // If another national prefix has been extracted.\n\n        if (this.nationalPrefix !== previousNationalPrefix) {\n          // National number has changed\n          // (due to another national prefix been extracted)\n          // therefore national number has changed\n          // therefore reset all previous formatting data.\n          // (and leading digits matching state)\n          this.initializePhoneNumberFormatsForCountry();\n          this.resetFormat();\n        }\n      }\n\n      if (this.nationalNumberDigits) {\n        // Match the available formats by the currently available leading digits.\n        this.matchFormats(this.nationalNumberDigits);\n      } // Format the phone number (given the next digits)\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits);\n    }\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits) {\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNextNationalNumberDigits()`,\n      // which formats based on the chosen formatting pattern.\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`.\n      var formattedNumber = this.attemptToFormatCompletePhoneNumber(); // Just because a phone number doesn't have a suitable format\n      // that doesn't mean that the phone number is invalid,\n      // because phone number formats only format phone numbers,\n      // they don't validate them and some (rare) phone numbers\n      // are meant to stay non-formatted.\n\n      if (formattedNumber) {\n        return formattedNumber;\n      } // Format the next phone number digits\n      // using the previously chosen phone number format.\n      //\n      // This is done here because if `attemptToFormatCompletePhoneNumber`\n      // was placed before this call then the `template`\n      // wouldn't reflect the situation correctly (and would therefore be inconsistent)\n      //\n\n\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat();\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If could format the next (current) digit\n          // using the previously chosen phone number format\n          // then return the formatted number so far.\n          //\n          // If no new phone number format could be chosen,\n          // and couldn't format the supplied national number\n          // using the previously chosen phone number pattern,\n          // then return `undefined`.\n          //\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then format the national phone number (so far)\n          // using the newly selected format.\n          //\n          // Will return `undefined` if it couldn't format\n          // the supplied national number\n          // using the selected phone number pattern.\n          //\n          return this.reformatNationalNumber();\n        }\n      }\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat() {\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var format = _ref;\n\n        // If this format is currently being used\n        // and is still possible, then stick to it.\n        if (this.chosenFormat === format) {\n          break;\n        }\n\n        if (!this.createFormattingTemplate(format)) {\n          continue;\n        }\n\n        this.chosenFormat = format; // With a new formatting template, the matched position\n        // using the old template needs to be reset.\n\n        this.populatedNationalNumberTemplatePosition = -1;\n        break;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national phone number entered.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    } // Formats each digit of the national phone number (so far)\n    // using the selected format.\n\n  }, {\n    key: \"reformatNationalNumber\",\n    value: function reformatNationalNumber() {\n      return this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);\n    }\n  }, {\n    key: \"initializePhoneNumberFormatsForCountry\",\n    value: function initializePhoneNumberFormatsForCountry() {\n      // Get all \"eligible\" phone number formats for this country\n      this.matchingFormats = this.metadata.formats().filter(function (format) {\n        // Compared to `libphonenumber`'s code, the two \"Discard a few formats\n        // that we know are not relevant based on the presence of the national prefix\"\n        // checks have changed: the first one has been moved to `.matchFormats()`,\n        // and the second one doesn't apply to this library because it doesn't deal with\n        // \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\n        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n      });\n    }\n  }, {\n    key: \"matchFormats\",\n    value: function matchFormats(leadingDigits) {\n      var _this = this;\n\n      // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        // If national prefix is mandatory for this phone number format\n        // and the user didn't input the national prefix\n        // then this phone number format isn't suitable.\n        if (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n          return false;\n        }\n\n        var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n        // leading digits pattern then it fits.\n\n        if (leadingDigitsPatternsCount === 0) {\n          return true;\n        } // Start excluding any non-matching formats only when the\n        // national number entered so far is at least 3 digits long,\n        // otherwise format matching would give false negatives.\n        // For example, when the digits entered so far are `2`\n        // and the leading digits pattern is `21` –\n        // it's quite obvious in this case that the format could be the one\n        // but due to the absence of further digits it would give false negative.\n\n\n        if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n          return true;\n        } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n        // then format matching starts narrowing down the list of possible formats\n        // (only previously matched formats are considered for next digits).\n\n\n        leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n        var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Brackets are required for `^` to be applied to\n        // all or-ed (`|`) parts, not just the first one.\n\n        return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      if (this.metadata.countryCallingCode() === '1') {\n        return ' ';\n      }\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      }\n\n      return '';\n    } // This is in accordance to how Google's `libphonenumber` does it.\n    // \"Check to see if there is an exact pattern match for these digits.\n    // If so, we should use this instead of any other formatting template\n    // whose `leadingDigitsPattern` also matches the input.\"\n\n  }, {\n    key: \"attemptToFormatCompletePhoneNumber\",\n    value: function attemptToFormatCompletePhoneNumber() {\n      for (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var format = _ref2;\n        var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n        if (!matcher.test(this.nationalNumberDigits)) {\n          continue;\n        } // Here, national number is formatted without \"national prefix\n        // formatting rule\", because otherwise there'd be a bug\n        // when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n\n\n        var formattedNationalNumber = (0, _format_.formatNationalNumberUsingFormat)(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).\n        this.metadata); // Check if this `format` preserves all digits.\n        // This is how it's done in Google's `libphonenumber`.\n        // Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n        //\n        // \"Check that we didn't remove nor add any extra digits when we matched\n        // this formatting pattern. This usually happens after we entered the last\n        // digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n        // formatted but AYTF should retain all the number entered and not change\n        // in order to match a format (of same leading digits and length) display\n        // in that way.\"\n        // \"If it's the same (i.e entered number and format is same), then it's\n        // safe to return this in formatted number as nothing is lost / added.\"\n        // Otherwise, don't use this format.\n        // https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n        // https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n        //\n\n        if ((0, _parseDigits[\"default\"])(formattedNationalNumber) !== this.nationalNumberDigits) {\n          continue;\n        } // Prepend national prefix (if any).\n\n\n        if (this.nationalPrefix) {\n          // Here, national number is formatted with \"national prefix\n          // formatting rule\". The reason is that \"national prefix\n          // formatting rule\" often adds parentheses, and while Google's\n          // `libphonenumber` dismisses those preferring simply prepending\n          // national prefix followed by a \" \" character, this library\n          // looks if the national prefix could be formatted better.\n          var formattedNationalNumberWithNationalPrefix = (0, _format_.formatNationalNumberUsingFormat)(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.\n          this.metadata);\n\n          if ((0, _parseDigits[\"default\"])(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\n            formattedNationalNumber = formattedNationalNumberWithNationalPrefix;\n          } else {\n            formattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n          }\n        } // formats national number (probably) without national prefix.\n        // Formatting a national number with national prefix could result in\n        // bugs when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n        // The \"are all digits preserved\" check fixes that type of bug.\n        // To leave the formatter in a consistent state\n\n\n        this.resetFormat();\n        this.chosenFormat = format; // Set `this.template` and `this.populatedNationalNumberTemplate`.\n\n        /* istanbul ignore else */\n\n        if (this.createFormattingTemplate(format)) {\n          // Populate `this.populatedNationalNumberTemplate` with phone number digits.\n          this.reformatNationalNumber();\n        } else {\n          // If the formatting template couldn't be created for a format,\n          // create it manually from the formatted phone number.\n          // This case doesn't ever happen with the current metadata.\n          this.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n          this.populatedNationalNumberTemplate = formattedNationalNumber;\n          this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;\n        }\n\n        return formattedNationalNumber;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefix\",\n    value: function getInternationalPrefix(options) {\n      return this.internationalPrefix ? options && options.spacing === false ? this.internationalPrefix : this.internationalPrefix + ' ' : '+';\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      if (this.isInternational()) {\n        var prefix = this.getInternationalPrefix();\n\n        if (!this.countryCallingCode) {\n          return \"\".concat(prefix).concat(this.digits);\n        }\n\n        if (!formattedNationalNumber) {\n          return \"\".concat(prefix).concat(this.countryCallingCode);\n        }\n\n        return \"\".concat(prefix).concat(this.countryCallingCode, \" \").concat(formattedNationalNumber);\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumber\",\n    value: function getNonFormattedNationalNumber() {\n      return this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;\n    } // Extracts the country calling code from the beginning\n    // of the entered `national_number` (so far),\n    // and places the remaining input into the `national_number`.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode() {\n      var _extractCountryCallin = (0, _parse_.extractCountryCallingCode)('+' + this.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (!countryCallingCode) {\n        return;\n      }\n\n      this.nationalNumberDigits = number;\n      this.countryCallingCode = countryCallingCode;\n      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n      this.initializePhoneNumberFormatsForCountry();\n      this.resetFormat();\n      return this.metadata.hasSelectedNumberingPlan();\n    }\n  }, {\n    key: \"extractNationalPrefix\",\n    value: function extractNationalPrefix() {\n      this.nationalPrefix = '';\n\n      if (!this.metadata.hasSelectedNumberingPlan()) {\n        return;\n      } // Only strip national prefixes for non-international phone numbers\n      // because national prefixes can't be present in international phone numbers.\n      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\n      var _stripNationalPrefixA = (0, _parse_.stripNationalPrefixAndCarrierCode)(this.nationalNumberDigits, this.metadata),\n          nationalNumber = _stripNationalPrefixA.nationalNumber,\n          carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\n      // strip national prefix and will instead prepend some digits to the `number`:\n      // for example, when number `2345678` is passed with `VI` country selected,\n      // it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\n      // So check if the `nationalNumber` is actually at the end of `this.nationalNumberDigits`.\n\n\n      if (nationalNumber) {\n        var index = this.nationalNumberDigits.indexOf(nationalNumber);\n\n        if (index < 0 || index !== this.nationalNumberDigits.length - nationalNumber.length) {\n          return;\n        }\n      }\n\n      if (carrierCode) {\n        this.carrierCode = carrierCode;\n      }\n\n      this.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - nationalNumber.length);\n      this.nationalNumberDigits = nationalNumber;\n      return this.nationalPrefix;\n    } // isPossibleNumber(number) {\n    // \tswitch (checkNumberLengthForType(number, undefined, this.metadata)) {\n    // \t\tcase 'IS_POSSIBLE':\n    // \t\t\treturn true\n    // \t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \t\t// \treturn !this.isInternational()\n    // \t\tdefault:\n    // \t\t\treturn false\n    // \t}\n    // }\n\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(this.countryCallingCode);\n      return countryCodes && countryCodes.length > 1;\n    }\n  }, {\n    key: \"createFormattingTemplate\",\n    value: function createFormattingTemplate(format) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (!template) {\n        return;\n      }\n\n      this.template = template;\n      this.populatedNationalNumberTemplate = template; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (this.isInternational()) {\n        this.template = this.getInternationalPrefix().replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n      }\n\n      return this.template;\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForNumberFormatPattern\",\n    value: function getTemplateForNumberFormatPattern(format, nationalPrefix) {\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (this.nationalNumberDigits.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalNumberDigits : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalNumberDigits` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalNumberDigits`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalNumberDigits` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format);\n      var includesNationalPrefix;\n\n      if (nationalPrefix) {\n        if (format.nationalPrefixFormattingRule()) {\n          var numberFormatWithNationalPrefix = numberFormat.replace(_format_.FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\n          if ((0, _parseDigits[\"default\"])(numberFormatWithNationalPrefix) === nationalPrefix + (0, _parseDigits[\"default\"])(numberFormat)) {\n            numberFormat = numberFormatWithNationalPrefix;\n            includesNationalPrefix = true;\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\n      if (nationalPrefix) {\n        if (!includesNationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      // Using `.split('')` to iterate through a string here\n      // to avoid requiring `Symbol.iterator` polyfill.\n      // `.split('')` is generally not safe for Unicode,\n      // but in this particular case for `digits` it is safe.\n      // for (const digit of digits)\n      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var digit = _ref3;\n\n        // If there is room for more digits in current `template`,\n        // then set the next digit in the `template`,\n        // and return the formatted digits so far.\n        // If more digits are entered than the current format could handle.\n        if (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n          // Reset the format.\n          this.resetFormat();\n          return;\n        }\n\n        this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);\n        this.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n      } // Return the formatted phone number so far.\n\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format) {\n      if (this.isInternational()) {\n        return (0, _format_.applyInternationalSeparatorStyle)(format.internationalFormat());\n      }\n\n      return format.format();\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.country = (0, _parse_.findCountryCode)(this.isInternational() ? this.countryCallingCode : this.defaultCallingCode, this.nationalNumberDigits, this.metadata);\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      if (this.isInternational()) {\n        if (!this.countryCallingCode) {\n          return;\n        }\n      } else {\n        if (!this.country && !this.defaultCallingCode) {\n          return;\n        }\n      }\n\n      if (!this.nationalNumberDigits) {\n        return undefined;\n      }\n\n      var countryCode = this.getCountry();\n      var callingCode = this.getCountryCallingCode() || this.defaultCallingCode;\n      var nationalNumber = this.nationalNumberDigits;\n      var carrierCode = this.carrierCode; // When an international number without a leading `+` has been autocorrected,\n      // extract country calling code, because normally it's only extracted\n      // for international numbers with a leading `+`.\n      // Could also just use `parsePhoneNumberFromString()` here\n      // instead of hacking around this single case.\n\n      if (!this.isInternational() && this.nationalNumberDigits === this.digits) {\n        var _extractCountryCallin2 = (0, _parse_.extractCountryCallingCodeFromInternationalNumberWithoutPlusSign)(this.digits, countryCode, callingCode, this.metadata.metadata),\n            countryCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (countryCallingCode) {\n          var _stripNationalPrefixA2 = (0, _parse_.stripNationalPrefixAndCarrierCodeFromCompleteNumber)(number, this.metadata),\n              shorterNationalNumber = _stripNationalPrefixA2.nationalNumber,\n              newCarrierCode = _stripNationalPrefixA2.carrierCode;\n\n          nationalNumber = shorterNationalNumber;\n          carrierCode = newCarrierCode;\n        }\n      }\n\n      var phoneNumber = new _PhoneNumber[\"default\"](countryCode || callingCode, nationalNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.nationalNumberDigits;\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      return this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n    }\n    /**\r\n     * Returns formatted phone number template.\r\n     * @return {string} [template]\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      if (!this.template) {\n        return this.getNonFormattedTemplate();\n      }\n\n      var index = -1;\n      var i = 0;\n\n      while (i < (this.isInternational() ? this.getInternationalPrefix({\n        spacing: false\n      }).length : 0) + this.digits.length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexports[\"default\"] = AsYouType;\n\nfunction stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i4 = 0, _dangling_braces = dangling_braces; _i4 < _dangling_braces.length; _i4++) {\n    var index = _dangling_braces[_i4];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\n\nfunction cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\n\nfunction closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n} // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\n\nfunction countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator4 = string.split(''), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i5 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i5++];\n    } else {\n      _i5 = _iterator4.next();\n      if (_i5.done) break;\n      _ref4 = _i5.value;\n    }\n\n    var character = _ref4;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\n\nfunction repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_PHONE_NUMBER);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n//# sourceMappingURL=AsYouType.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValidNumberForRegion;\n\nvar _isViablePhoneNumber = _interopRequireDefault(require(\"./isViablePhoneNumber\"));\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nvar _isValidNumberForRegion_ = _interopRequireDefault(require(\"./isValidNumberForRegion_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction isValidNumberForRegion(number, country, metadata) {\n  if (typeof number !== 'string') {\n    throw new TypeError('number must be a string');\n  }\n\n  if (typeof country !== 'string') {\n    throw new TypeError('country must be a string');\n  } // `parse` extracts phone numbers from raw text,\n  // therefore it will cut off all \"garbage\" characters,\n  // while this `validate` function needs to verify\n  // that the phone number contains no \"garbage\"\n  // therefore the explicit `isViablePhoneNumber` check.\n\n\n  var input;\n\n  if ((0, _isViablePhoneNumber[\"default\"])(number)) {\n    input = (0, _parse_[\"default\"])(number, {\n      defaultCountry: country\n    }, metadata);\n  } else {\n    input = {};\n  }\n\n  return (0, _isValidNumberForRegion_[\"default\"])(input, country, undefined, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = formatNumber;\nexports.formatNationalNumberUsingFormat = formatNationalNumberUsingFormat;\nexports.applyInternationalSeparatorStyle = applyInternationalSeparatorStyle;\nexports.FIRST_GROUP_PATTERN = void 0;\n\nvar _constants = require(\"./constants\");\n\nvar _util = require(\"./util\");\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _IDD = require(\"./IDD\");\n\nvar _RFC = require(\"./RFC3966\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\n\nfunction formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new _metadata[\"default\"](metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return (0, _RFC.formatRFC3966)({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = (0, _IDD.getIDDPrefix)(options.fromCountry, undefined, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = \"\".concat(IDDPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options));\n        }\n\n        return addExtension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return \"\".concat(IDDPrefix).concat(countryCallingCode).concat(nationalNumber);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\n\nvar FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexports.FIRST_GROUP_PATTERN = FIRST_GROUP_PATTERN;\n\nfunction formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalSeparator) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref;\n\n    // Validate leading digits\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if ((0, _util.matchesEntirely)(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\n\nfunction applyInternationalSeparatorStyle(local) {\n  return local.replace(new RegExp(\"[\".concat(_constants.VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n  var fromCountryMetadata = new _metadata[\"default\"](toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n  }\n}\n//# sourceMappingURL=format_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isPossibleNumber;\n\nvar _getNumberType = require(\"./getNumberType\");\n\nvar _isPossibleNumber_ = _interopRequireDefault(require(\"./isPossibleNumber_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nfunction isPossibleNumber() {\n  var _normalizeArguments = (0, _getNumberType.normalizeArguments)(arguments),\n      input = _normalizeArguments.input,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _isPossibleNumber_[\"default\"])(input, options, metadata);\n}\n//# sourceMappingURL=isPossibleNumber.js.map","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"signin\"},[_c('div',{staticClass:\"card \"},[_vm._l((_vm.notifications),function(notification){return (_vm.notifications)?_c('v-alert',{key:notification.id,attrs:{\"dismissible\":\"\",\"type\":notification.type}},[_vm._v(\" \"+_vm._s(notification.message)+\" \")]):_vm._e()}),_c('div',{staticClass:\"signin__header\"},[_c('h5',[_c('v-icon',[_vm._v(\"mdi-lock\")]),_vm._v(\" \"+_vm._s(_vm.$t('createAccount')))],1),_c('a',{on:{\"click\":_vm.ChangeView}},[_vm._v(_vm._s(_vm.$t('signin')))])]),_c('div',{staticClass:\"signin__google \"},[_c('h6',[_vm._v(_vm._s(_vm.$t('signinWithGoogle')))]),_c('button',{staticClass:\"btn btn-outline-danger\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){$event.preventDefault();return _vm.handleSignupWithGoogle($event)}}},[_c('i',{staticClass:\"fab fa-google-plus-square\"}),_vm._v(\" Google \")])]),(_vm.passwordRules)?_c('v-alert',{attrs:{\"border\":\"right\",\"color\":\"blue-grey\",\"dark\":\"\"}},[_vm._v(\" \"+_vm._s(_vm.passwordRules)+\" \")]):_vm._e(),(_vm.loading)?_c('loading',{attrs:{\"dialog\":_vm.loading}}):_vm._e(),_c('v-form',{ref:\"form\",staticClass:\"signup__form\",attrs:{\"lazy-validation\":\"\"},model:{value:(_vm.valid),callback:function ($$v) {_vm.valid=$$v},expression:\"valid\"}},[_c('div',{staticClass:\" row justify-content-center align-items-center\"},[_c('div',{staticClass:\"col-sm-6  \"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.firstName),expression:\"firstName\"}],staticClass:\"form-control \",attrs:{\"placeholder\":_vm.$t('firstName'),\"type\":\"text\",\"name\":\"firstName\"},domProps:{\"value\":(_vm.firstName)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.firstName=$event.target.value}}})]),_c('div',{staticClass:\"col-sm-6\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.lastName),expression:\"lastName\"}],staticClass:\"form-control \",attrs:{\"placeholder\":_vm.$t('lastName'),\"type\":\"text\",\"name\":\"lastNname\"},domProps:{\"value\":(_vm.lastName)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.lastName=$event.target.value}}})])]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.username),expression:\"username\"}],staticClass:\"form-control \",attrs:{\"placeholder\":_vm.$t('username'),\"type\":\"text\",\"name\":\"username\"},domProps:{\"value\":(_vm.username)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.username=$event.target.value}}}),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.email),expression:\"email\"}],staticClass:\"form-control\",attrs:{\"placeholder\":_vm.$t('Email'),\"type\":\"email\",\"name\":\"email\"},domProps:{\"value\":(_vm.email)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.email=$event.target.value}}}),_c('country-select',{staticClass:\"form-control\",attrs:{\"country\":_vm.country,\"topCountry\":\"US\"},model:{value:(_vm.country),callback:function ($$v) {_vm.country=$$v},expression:\"country\"}}),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.password),expression:\"password\"}],staticClass:\"form-control\",attrs:{\"placeholder\":_vm.$t('password'),\"type\":\"password\",\"name\":\"password\"},domProps:{\"value\":(_vm.password)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.password=$event.target.value}}}),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.confirmpassword),expression:\"confirmpassword\"}],staticClass:\"form-control\",attrs:{\"placeholder\":_vm.$t('confirmPassword'),\"type\":\"password\",\"name\":\"confirmpassword\"},domProps:{\"value\":(_vm.confirmpassword)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.confirmpassword=$event.target.value}}}),_c('p',{},[_vm._v(_vm._s(_vm.$t(_vm.agreeStmnt))+\" \")]),_c('span',{staticClass:\"d-inline-block\",attrs:{\"tabindex\":\"0\",\"data-toggle\":\"tooltip\",\"title\":\"button disabled\"}},[_c('button',{staticClass:\"btn \",attrs:{\"disabled\":_vm.disabled,\"type\":\"button\"},on:{\"click\":function($event){$event.preventDefault();return _vm.handleSignupWithEmail($event)}}},[_vm._v(\" \"+_vm._s(_vm.$t('createAccount'))+\" \")])])],1)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"intl-tel-input\",class:_vm.currentOptions.className},[_c('div',{staticClass:\"conutry-list\",class:{ active: (!_vm.currentOptions.input.readonly & _vm.showConutryList) }},[_c('div',{staticClass:\"conutry-category\"},_vm._l((_vm.countriesGroups),function(group,alphabet){return _c('div',{key:alphabet,staticClass:\"category-box\"},[_c('ul',{staticClass:\"list\"},_vm._l((group),function(country){return _c('li',{key:country.code,staticClass:\"category-box-item\",on:{\"click\":function($event){return _vm.onSelectCountry(country.code)}}},[_c('span',{staticClass:\"item-conutry-name\"},[_vm._v(_vm._s(country.name))]),_c('span',{staticClass:\"item-conutry-code\"},[_vm._v(\"+\"+_vm._s(country.dialCode))])])}),0)])}),0)]),_c('div',{staticClass:\"select-conutry\",on:{\"click\":function($event){_vm.showConutryList = !_vm.showConutryList}}},[_c('span',{staticClass:\"conutry-code\"},[_vm._v(\"+\"+_vm._s(_vm.currentCountry.dialCode))])]),_c('div',{staticClass:\"input-wrapper\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.modelValue),expression:\"modelValue\"}],staticClass:\"tel-input\",attrs:{\"type\":\"tel\",\"autocomplete\":\"off\",\"placeholder\":_vm.currentOptions.input.placeholder || _vm.currentCountry.phoneFormat,\"required\":_vm.currentOptions.input.required,\"readonly\":_vm.currentOptions.input.readonly,\"autofocus\":\"\"},domProps:{\"value\":(_vm.modelValue)},on:{\"focus\":function($event){_vm.showConutryList = !_vm.showConutryList},\"keyup\":_vm.validatorCellphone,\"input\":function($event){if($event.target.composing){ return; }_vm.modelValue=$event.target.value}}})])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { parse as parseCustom, format as formatCustom, isValidNumber as isValidNumberCustom, getNumberType as getNumberTypeCustom } from 'libphonenumber-js/custom'\nimport metadata from './metadata.mobile.json'\n\nexport const parse = (...args) => parseCustom(...args, metadata)\n\nexport const format = (...args) => formatCustom(...args, metadata)\n\nexport const isValidNumber = (...args) => isValidNumberCustom(...args, metadata)\n\nexport const getNumberType = (...args) => getNumberTypeCustom(...args, metadata)","<template>\n  <div class=\"intl-tel-input\" :class=\"currentOptions.className\">\n    <div\n      class=\"conutry-list\"\n      :class=\"{ active: (!currentOptions.input.readonly & showConutryList) }\"\n    >\n      <!-- <div class=\"search-wrapper\">\n        <input type=\"text\" class=\"search-input\" v-model=\"searchValue\" @keyup=\"onSearch\">\n      </div> -->\n      <div class=\"conutry-category\">\n        <div class=\"category-box\" v-for=\"(group, alphabet) in countriesGroups\" :key=\"alphabet\">\n          <ul class=\"list\">\n            <li\n              class=\"category-box-item\"\n              v-for=\"country in group\"\n              :key=\"country.code\"\n              @click=\"onSelectCountry(country.code)\"\n            >\n              <span class=\"item-conutry-name\">{{ country.name }}</span>\n              <span class=\"item-conutry-code\">+{{ country.dialCode }}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"select-conutry\" @click=\"showConutryList = !showConutryList\">\n      <span class=\"conutry-code\">+{{ currentCountry.dialCode }}</span>\n    </div>\n    <div\n      class=\"input-wrapper\"\n    >\n      <input\n        type=\"tel\"\n        class=\"tel-input\"\n        autocomplete=\"off\"\n        :placeholder=\"currentOptions.input.placeholder || currentCountry.phoneFormat\"\n        :required=\"currentOptions.input.required\"\n        :readonly=\"currentOptions.input.readonly\"\n        v-model=\"modelValue\"\n        @focus=\"showConutryList = !showConutryList\"\n        @keyup=\"validatorCellphone\"\n        autofocus\n      >\n    </div>\n  </div>\n</template>\n\n<script>\nimport countries from \"./assets/countries.json\";\nimport { parse, format, getNumberType, isValidNumber } from \"./assets/validate\";\nimport \"./assets/scss/intl-tel-input.css\";\n\nexport default {\n  name: \"IntlTelInput\",\n  props: {\n    options: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    countryCode: {\n      type: String,\n      default: \"tw\"\n    },\n    dialCode: {\n      type: String,\n      default: \"\"\n    },\n    value: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      countriesGroups: countries,\n      countries: Object.values(countries).flat(),\n      initOptions: {\n        separateDialCode: false,\n        className: \"\",\n        input: {\n          required: false,\n          readonly: false,\n          placeholder: \"\"\n        }\n      },\n      currentCountryCode: this.countryCode,\n      currentDialCode: this.dialCode,\n      modelValue: this.value,\n      searchValue: \"\",\n      showConutryList: false,\n      validatorMode: false,\n      validatorStatus: false\n    };\n  },\n  computed: {\n    currentOptions() {\n      return Object.assign(this.initOptions, this.options);\n    },\n    currentCountry() {\n      const countryCode = this.currentCountryCode.toLowerCase();\n      return this.countries.find(c => c.code === countryCode);\n    },\n    searchRegExp() {\n      return new RegExp(this.searchValue.toLowerCase(), \"gi\");\n    }\n  },\n  mounted() {\n    // 有預設值自動檢查格式\n    if (this.currentDialCode && this.value) this.validatorCellphone();\n  },\n  methods: {\n    onSearch() {\n      if (!this.searchValue) {\n        this.countriesGroups = { ...countries };\n        return;\n      }\n\n      const initCountries = this.countries;\n      let countryCopie = [];\n\n      const newCounties = initCountries.filter(country => {\n        return (\n          country.name.toLowerCase().search(this.searchRegExp) !== -1 ||\n          country.dialCode.toString().search(this.searchRegExp) !== -1\n        );\n      });\n\n      newCounties.map(country => {\n        let char = country.name.substr(0, 1).toUpperCase();\n        if (countryCopie[char] === undefined) countryCopie[char] = [];\n        countryCopie[char].push(country);\n      });\n\n      this.countriesGroups = { ...countryCopie };\n    },\n    onSelectCountry(code) {\n      this.currentCountryCode = code;\n      this.modelValue = \"\";\n      this.validatorCellphone();\n    },\n    validatorCellphone() {\n      this.validatorMode = true;\n      this.validatorStatus =\n        (this._getNumberType() === \"MOBILE\" ||\n          this._getNumberType() === \"FIXED_LINE_OR_MOBILE\") &&\n        this._isValidNumber();\n\n      if (this.validatorStatus) {\n        this.$emit(\"validateSuccess\", {\n          number: this._getNumber(),\n          countryCode: this.currentCountryCode\n        });\n      } else {\n        this.$emit(\"validateError\");\n      }\n    },\n    _getNumber() {\n      return format(\n        this._getFullNumber(),\n        this.currentCountryCode.toUpperCase(),\n        \"International\"\n      );\n    },\n    _getFullNumber() {\n      let val = this.modelValue,\n        dialCode = this.currentCountry.dialCode.toString(),\n        prefix;\n      if (this.currentOptions.separateDialCode) {\n        prefix = \"+\" + dialCode;\n      } else if (\n        dialCode &&\n        dialCode.charAt(0) == \"1\" &&\n        dialCode.length == 4 &&\n        dialCode.substr(1) != val.substr(0, 3)\n      ) {\n        prefix = dialCode.substr(1);\n      } else {\n        prefix = \"\";\n      }\n      return prefix + val;\n    },\n    _getNumberType() {\n      try {\n        let parsePhone = parse(\n          this._getFullNumber(),\n          this.currentCountry.code.toUpperCase()\n        );\n        return getNumberType(parsePhone.phone, parsePhone.country);\n      } catch (error) {\n        return -1;\n      }\n    },\n    _isValidNumber() {\n      if (this.modelValue) {\n        let val = this._getFullNumber().trim(),\n          countryCode = this.currentCountry.code.toUpperCase();\n        return isValidNumber(val, countryCode);\n      }\n\n      return false;\n    }\n  }\n};\n</script>\n\n\n\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IntlTelephone.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IntlTelephone.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IntlTelephone.vue?vue&type=template&id=f2a3291a&\"\nimport script from \"./IntlTelephone.vue?vue&type=script&lang=js&\"\nexport * from \"./IntlTelephone.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n      <div class=\"signin\">\n                <div class=\"card \">\n                    <v-alert\n                        dismissible\n                        v-if=\"notifications\"\n                        v-for=\"notification in notifications\" :key=\"notification.id\"\n                        :type=\"notification.type\"\n                        >\n                        {{notification.message}}\n                        </v-alert>\n                       \n                    <div class=\"signin__header\">\n                        <h5> <v-icon>mdi-lock</v-icon> {{$t('createAccount')}}</h5>\n                        <a @click=\"ChangeView\" >{{$t('signin')}}</a>\n                    </div>\n                        <div class=\"signin__google \">\n                            <h6 >{{$t('signinWithGoogle')}}</h6>\n                            <button type=\"button\" @click.prevent=\" handleSignupWithGoogle\" class=\"btn btn-outline-danger\">\n                            <i class=\"fab fa-google-plus-square\"></i>\n                            Google\n                            </button>\n                        </div>\n                         <v-alert\n                            border=\"right\"\n                            color=\"blue-grey\"\n                            dark\n                            v-if=\"passwordRules\"\n                            >\n                              {{passwordRules}}\n                            </v-alert>\n                            <loading v-if=\"loading\" :dialog=\"loading\"></loading>\n                        <v-form ref=\"form\"\n                            v-model=\"valid\"\n                            lazy-validation \n                            class=\"signup__form\">\n                            <div class=\" row justify-content-center align-items-center\">\n                                <div class=\"col-sm-6  \">\n                                      <input class=\"form-control \" :placeholder=\"$t('firstName')\" type=\"text\" name=\"firstName\"  v-model=\"firstName\"/>\n                                      \n                                </div>\n                                <div class=\"col-sm-6\">\n                                     <input class=\"form-control \" :placeholder=\"$t('lastName')\" type=\"text\" name=\"lastNname\"  v-model=\"lastName\" />\n                                </div>   \n                            </div>\n                            <input class=\"form-control \" :placeholder=\"$t('username')\" type=\"text\" name=\"username\"  v-model=\"username\" />\n                            <input class=\"form-control\" :placeholder=\"$t('Email')\" type=\"email\" name=\"email\"  v-model=\"email\" />\n                             <!-- <input class=\"form-control\" placeholder=\"Region\" type=\"text\" name=\"name\"  /> -->\n                             <country-select class=\"form-control\" v-model=\"country\" :country=\"country\" topCountry=\"US\" />\n                            <!-- <input class=\"form-control\" placeholder=\"Phone Number\" type=\"text\" name=\"name\"  /> -->\n                            <input class=\"form-control\" :placeholder=\"$t('password')\"  type=\"password\" name=\"password\" v-model=\"password\"/>\n                            <input class=\"form-control\" :placeholder=\"$t('confirmPassword')\"  type=\"password\" name=\"confirmpassword\" v-model=\"confirmpassword\"/>\n                              <!-- <intl-telephone class=\"form-control\"></intl-telephone> -->\n                            <!-- <input class=\"form-control\" placeholder=\"Verification Code\" type=\"text\" name=\"verify\"  /> -->\n                            <p class=\"\">{{$t(agreeStmnt)}} </p>\n                            <span class=\"d-inline-block\" tabindex=\"0\" data-toggle=\"tooltip\" title=\"button disabled\">\n                                    <button  \n                                    @click.prevent=\"handleSignupWithEmail\" \n                                    :disabled=\"disabled\" type=\"button\"\n                                    class=\"btn \"\n                                    >\n                                   {{$t('createAccount')}}\n                                    </button> \n                            </span>\n                            \n                        </v-form>\n                \n                </div>\n              \n            </div>\n        \n</template>\n\n<script>\nimport IntlTelephone from '@/util/IntlTelephone.vue'\nexport default {\n    components: {\n        IntlTelephone\n    }, \n    data () {\n      return {\n            valid: true,\n            country: '',\n            phone: '',\n            firstName: '',\n            email: '',\n            password:'',\n            lastName: '',\n            confirmpassword: '',\n            username: '',\n            passwordRules: \"\"\n      }\n    },\n   computed: {\n        notifications(){ \n            return this.$store.getters.getNotifications\n        },\n        loading(){\n            console.log(this.$store.getters.getLoading);\n             return this.$store.getters.getLoading;\n        },\n        disabled(){\n            if(this.country === '' || this.firstName === '' || this.email === '' || this.password === '' || this.username === '' || this.lastName === ''){\n                return true\n            }\n            return false\n        }\n   },\n  methods: {\n      ChangeView(){\n            this.$emit('changeView', true)\n            \n    },\n     handleSignupWithGoogle(){\n         this.$store.dispatch('SignupUserwithGoogle')\n     },\n     handleSignupWithEmail(){\n          const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n       if(this.password !== this.confirmpassword){\n            this.passwordRules = \"Password must match\"\n       }\n    //    else if((re.test(this.email))){\n    //         this.passwordRules = \"Email must be valid\"\n    //    }\n       else{\n           this.passwordRules = \"\"\n            this.$store.dispatch('SignUpWithEmail', {\n                country: this.country,\n                phone: this.phone,\n                firstName: this.firstName,\n                email: this.email,\n                password: this.password,\n                lastName: this.lastName,\n                confirmpassword: this.confirmpassword,\n                username: this.username\n         })\n       }\n        \n     }\n  }\n\n}\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signup.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signup.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Signup.vue?vue&type=template&id=a4b40d04&\"\nimport script from \"./Signup.vue?vue&type=script&lang=js&\"\nexport * from \"./Signup.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAlert } from 'vuetify/lib/components/VAlert';\nimport { VForm } from 'vuetify/lib/components/VForm';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\ninstallComponents(component, {VAlert,VForm,VIcon})\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findPhoneNumbersInText;\nexports.getArguments = getArguments;\n\nvar _findNumbers = _interopRequireDefault(require(\"./findNumbers\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction findPhoneNumbersInText(text, defaultCountry, options, metadata) {\n  var args = getArguments(defaultCountry, options, metadata);\n  return (0, _findNumbers[\"default\"])(text, args.options, args.metadata);\n}\n\nfunction getArguments(defaultCountry, options, metadata) {\n  if (metadata) {\n    if (defaultCountry) {\n      options = _objectSpread({}, options, {\n        defaultCountry: defaultCountry\n      });\n    }\n  } else {\n    if (options) {\n      metadata = options;\n\n      if (defaultCountry) {\n        if (is_object(defaultCountry)) {\n          options = defaultCountry;\n        } else {\n          options = {\n            defaultCountry: defaultCountry\n          };\n        }\n      } else {\n        options = undefined;\n      }\n    } else {\n      metadata = defaultCountry;\n      options = undefined;\n    }\n  }\n\n  return {\n    options: _objectSpread({}, options, {\n      v2: true\n    }),\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=findPhoneNumbersInText.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getCountries;\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction getCountries(metadata) {\n  return new _metadata[\"default\"](metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findNumbers;\n\nvar _findNumbers_ = _interopRequireDefault(require(\"./findNumbers_\"));\n\nvar _parsePhoneNumber = require(\"./parsePhoneNumber\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction findNumbers() {\n  var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _findNumbers_[\"default\"])(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _PhoneNumber = _interopRequireDefault(require(\"./PhoneNumber\"));\n\nvar _constants = require(\"./constants\");\n\nvar _extension = require(\"./extension\");\n\nvar _RegExpCache = _interopRequireDefault(require(\"./findNumbers/RegExpCache\"));\n\nvar _util = require(\"./findNumbers/util\");\n\nvar _utf = require(\"./findNumbers/utf-8\");\n\nvar _Leniency = _interopRequireDefault(require(\"./findNumbers/Leniency\"));\n\nvar _parsePreCandidate = _interopRequireDefault(require(\"./findNumbers/parsePreCandidate\"));\n\nvar _isValidPreCandidate = _interopRequireDefault(require(\"./findNumbers/isValidPreCandidate\"));\n\nvar _isValidCandidate = _interopRequireWildcard(require(\"./findNumbers/isValidCandidate\"));\n\nvar _metadata = require(\"./metadata\");\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(_utf.pZ, \"-|-\").concat(_utf.pZ, \")\").concat(_utf.pZ, \"*(.+)\"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(_utf.pZ, \"*(.+)\"), // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(_utf.pZ, \"*([^.]+)\"), // Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(_utf.pZ, \"+(\").concat(_utf.PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = (0, _util.limit)(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = (0, _util.limit)(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = _constants.MAX_LENGTH_FOR_NSN + _constants.MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = (0, _util.limit)(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(_constants.VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = _utf.pNd + (0, _util.limit)(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + _isValidCandidate.LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + _extension.EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_utf._pN).concat(_utf._pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher =\n/*#__PURE__*/\nfunction () {\n  /** The iteration tristate. */\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    _defineProperty(this, \"state\", 'NOT_READY');\n\n    _defineProperty(this, \"searchIndex\", 0);\n\n    _defineProperty(this, \"regExpCache\", new _RegExpCache[\"default\"](32));\n\n    options = _objectSpread({}, options, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && (0, _metadata.isSupportedCountry)(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = _Leniency[\"default\"][options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = (0, _parsePreCandidate[\"default\"])(candidate);\n\n        if ((0, _isValidPreCandidate[\"default\"])(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new _PhoneNumber[\"default\"](match.country || match.countryCallingCode, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _i = 0, _INNER_MATCHES = INNER_MATCHES; _i < _INNER_MATCHES.length; _i++) {\n        var innerMatchPattern = _INNER_MATCHES[_i];\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = (0, _util.trimAfterFirstMatch)(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = (0, _util.trimAfterFirstMatch)(UNWANTED_END_CHAR_PATTERN, matches[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!(0, _isValidCandidate[\"default\"])(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = (0, _parse_[\"default\"])(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexports[\"default\"] = PhoneNumberMatcher;\n//# sourceMappingURL=PhoneNumberMatcher.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isViablePhoneNumber;\n\nvar _constants = require(\"./constants\");\n\nvar _extension = require(\"./extension\");\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + _constants.VALID_DIGITS + ']{' + _constants.MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + _constants.PLUS_CHARS + ']{0,1}' + '(?:' + '[' + _constants.VALID_PUNCTUATION + ']*' + '[' + _constants.VALID_DIGITS + ']' + '){3,}' + '[' + _constants.VALID_PUNCTUATION + _constants.VALID_DIGITS + ']*'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + _extension.EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nfunction isViablePhoneNumber(number) {\n  return number.length >= _constants.MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexports[\"default\"] = ParseError;\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parsePhoneNumber;\nexports.normalizeArguments = normalizeArguments;\n\nvar _parsePhoneNumber_ = _interopRequireDefault(require(\"./parsePhoneNumber_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _parsePhoneNumber_[\"default\"])(text, options, metadata);\n}\n\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar defineProperty = require('../internals/object-define-property').f;\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar isRegExp = require('../internals/is-regexp');\nvar getFlags = require('../internals/regexp-flags');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar setInternalState = require('../internals/internal-state').set;\nvar setSpecies = require('../internals/set-species');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\nvar NativeRegExp = global.RegExp;\nvar RegExpPrototype = NativeRegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n\n// \"new\" should create a new object, old webkit bug\nvar CORRECT_NEW = new NativeRegExp(re1) !== re1;\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\n\nvar FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {\n  re2[MATCH] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';\n})));\n\n// `RegExp` constructor\n// https://tc39.github.io/ecma262/#sec-regexp-constructor\nif (FORCED) {\n  var RegExpWrapper = function RegExp(pattern, flags) {\n    var thisIsRegExp = this instanceof RegExpWrapper;\n    var patternIsRegExp = isRegExp(pattern);\n    var flagsAreUndefined = flags === undefined;\n    var sticky;\n\n    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {\n      return pattern;\n    }\n\n    if (CORRECT_NEW) {\n      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;\n    } else if (pattern instanceof RegExpWrapper) {\n      if (flagsAreUndefined) flags = getFlags.call(pattern);\n      pattern = pattern.source;\n    }\n\n    if (UNSUPPORTED_Y) {\n      sticky = !!flags && flags.indexOf('y') > -1;\n      if (sticky) flags = flags.replace(/y/g, '');\n    }\n\n    var result = inheritIfRequired(\n      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),\n      thisIsRegExp ? this : RegExpPrototype,\n      RegExpWrapper\n    );\n\n    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });\n\n    return result;\n  };\n  var proxy = function (key) {\n    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {\n      configurable: true,\n      get: function () { return NativeRegExp[key]; },\n      set: function (it) { NativeRegExp[key] = it; }\n    });\n  };\n  var keys = getOwnPropertyNames(NativeRegExp);\n  var index = 0;\n  while (keys.length > index) proxy(keys[index++]);\n  RegExpPrototype.constructor = RegExpWrapper;\n  RegExpWrapper.prototype = RegExpPrototype;\n  redefine(global, 'RegExp', RegExpWrapper);\n}\n\n// https://tc39.github.io/ecma262/#sec-get-regexp-@@species\nsetSpecies('RegExp');\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIDDPrefix = getIDDPrefix;\nexports.stripIDDPrefix = stripIDDPrefix;\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + _constants.VALID_DIGITS + '])');\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nfunction getIDDPrefix(country, callingCode, metadata) {\n  var countryMetadata = new _metadata[\"default\"](metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\n\nfunction stripIDDPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new _metadata[\"default\"](metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.\n  // No explanation from Google given.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  /* istanbul ignore next */\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=IDD.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parse;\nexports.extractFormattedPhoneNumber = extractFormattedPhoneNumber;\nexports.stripNationalPrefixAndCarrierCode = stripNationalPrefixAndCarrierCode;\nexports.findCountryCode = findCountryCode;\nexports.stripNationalPrefixAndCarrierCodeFromCompleteNumber = stripNationalPrefixAndCarrierCodeFromCompleteNumber;\nexports.extractCountryCallingCode = extractCountryCallingCode;\nexports.extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign;\n\nvar _constants = require(\"./constants\");\n\nvar _util = require(\"./util\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _isViablePhoneNumber = _interopRequireDefault(require(\"./isViablePhoneNumber\"));\n\nvar _extension = require(\"./extension\");\n\nvar _parseIncompletePhoneNumber = _interopRequireDefault(require(\"./parseIncompletePhoneNumber\"));\n\nvar _getCountryCallingCode = _interopRequireDefault(require(\"./getCountryCallingCode\"));\n\nvar _getNumberType_ = _interopRequireWildcard(require(\"./getNumberType_\"));\n\nvar _isPossibleNumber_ = require(\"./isPossibleNumber_\");\n\nvar _IDD = require(\"./IDD\");\n\nvar _RFC = require(\"./RFC3966\");\n\nvar _PhoneNumber = _interopRequireDefault(require(\"./PhoneNumber\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + _constants.PLUS_CHARS + _constants.VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + _constants.VALID_DIGITS + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nfunction parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new _metadata[\"default\"](metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new _ParseError[\"default\"]('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      throw new _ParseError[\"default\"]('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new _ParseError[\"default\"]('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < _constants.MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new _ParseError[\"default\"]('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > _constants.MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new _ParseError[\"default\"]('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new _PhoneNumber[\"default\"](countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? (0, _util.matchesEntirely)(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && (0, _isPossibleNumber_.isPossibleNumber)(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} throwOnError — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\n\nfunction extractFormattedPhoneNumber(text, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new _ParseError[\"default\"]('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\n\nfunction stripNationalPrefixAndCarrierCode(number, metadata) {\n  if (number && metadata.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // If a \"capturing group\" didn't match\n      // then its element in `prefixMatch[]` array will be `undefined`.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n\n      if (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // Carrier code is the last captured group,\n        // but only when there's more than one captured group.\n\n        if (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If it's a simple-enough case then just\n      // strip the national prefix from the number.\n      else {\n          // National prefix is the whole substring matched by\n          // the `national_prefix_for_parsing` regexp.\n          var nationalPrefix = prefixMatch[0];\n          nationalNumber = number.slice(nationalPrefix.length); // Carrier code is the last captured group.\n\n          if (capturedGroupsCount > 0) {\n            carrierCode = prefixMatch[1];\n          }\n        } // We require that the national (significant) number remaining after\n      // stripping the national prefix and carrier code be long enough\n      // to be a possible length for the region. Otherwise, we don't do\n      // the stripping, since the original number could be a valid number.\n      // For example, in some countries (Russia, Belarus) the same digit\n      // could be both a national prefix and a leading digit of a valid\n      // national phone number, like `8` is the national prefix for Russia\n      // and `800 555 35 35` is a valid national (significant) number.\n\n\n      if ((0, _util.matchesEntirely)(number, metadata.nationalNumberPattern()) && !(0, _util.matchesEntirely)(nationalNumber, metadata.nationalNumberPattern())) {// Don't strip national prefix or carrier code.\n      } else {\n        return {\n          nationalNumber: nationalNumber,\n          carrierCode: carrierCode\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n\nfunction findCountryCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n} // Changes `metadata` `country`.\n\n\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n  metadata = new _metadata[\"default\"](metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if ((0, _getNumberType_[\"default\"])({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return (0, _RFC.parseRFC3966)(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !(0, _isViablePhoneNumber[\"default\"])(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = (0, _extension.extractExtension)(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode((0, _parseIncompletePhoneNumber[\"default\"])(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || (0, _getCountryCallingCode[\"default\"])(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _stripNationalPrefixA = stripNationalPrefixAndCarrierCodeFromCompleteNumber((0, _parseIncompletePhoneNumber[\"default\"])(number), metadata),\n      nationalNumber = _stripNationalPrefixA.nationalNumber,\n      carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\n\nfunction stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCode((0, _parseIncompletePhoneNumber[\"default\"])(number), metadata),\n      nationalNumber = _stripNationalPrefixA2.nationalNumber,\n      carrierCode = _stripNationalPrefixA2.carrierCode; // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n\n\n  if (nationalNumber.length !== number.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch ((0, _getNumberType_.checkNumberLengthForType)(nationalNumber, undefined, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\n\nfunction extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = (0, _IDD.stripIDDPrefix)(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin2.countryCallingCode,\n            shorterNumber = _extractCountryCallin2.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new _metadata[\"default\"](metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= _constants.MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(undefined, _countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\n\nfunction extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? (0, _getCountryCallingCode[\"default\"])(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new _metadata[\"default\"](metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _stripNationalPrefixA3 = stripNationalPrefixAndCarrierCode(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _stripNationalPrefixA3.nationalNumber;\n\n    var _stripNationalPrefixA4 = stripNationalPrefixAndCarrierCode(number, metadata),\n        nationalNumber = _stripNationalPrefixA4.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!(0, _util.matchesEntirely)(nationalNumber, metadata.nationalNumberPattern()) && (0, _util.matchesEntirely)(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || (0, _getNumberType_.checkNumberLengthForType)(nationalNumber, undefined, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=parse_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValidNumber;\n\nvar _validate_ = _interopRequireDefault(require(\"./validate_\"));\n\nvar _getNumberType = require(\"./getNumberType\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Finds out national phone number type (fixed line, mobile, etc)\nfunction isValidNumber() {\n  var _normalizeArguments = (0, _getNumberType.normalizeArguments)(arguments),\n      input = _normalizeArguments.input,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _validate_[\"default\"])(input, options, metadata);\n}\n//# sourceMappingURL=validate.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = searchPhoneNumbersInText;\n\nvar _searchNumbers = _interopRequireDefault(require(\"./searchNumbers\"));\n\nvar _findPhoneNumbersInText = require(\"./findPhoneNumbersInText\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction searchPhoneNumbersInText(text, defaultCountry, options, metadata) {\n  var args = (0, _findPhoneNumbersInText.getArguments)(defaultCountry, options, metadata);\n  return (0, _searchNumbers[\"default\"])(text, args.options, args.metadata);\n}\n//# sourceMappingURL=searchPhoneNumbersInText.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\n// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nfunction _default(a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _metadata.getCountryCallingCode;\n  }\n});\n\nvar _metadata = require(\"./metadata\");\n//# sourceMappingURL=getCountryCallingCode.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDigit = parseDigit;\nexports[\"default\"] = parseDigits;\nexports.DIGITS = void 0;\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nvar DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexports.DIGITS = DIGITS;\n\nfunction parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\n\nfunction parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getExampleNumber;\n\nvar _PhoneNumber = _interopRequireDefault(require(\"./PhoneNumber\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction getExampleNumber(country, examples, metadata) {\n  if (examples[country]) {\n    return new _PhoneNumber[\"default\"](country, examples[country], metadata);\n  }\n}\n//# sourceMappingURL=getExampleNumber.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findPhoneNumbers;\nexports.searchPhoneNumbers = searchPhoneNumbers;\n\nvar _findPhoneNumbers_ = _interopRequireWildcard(require(\"./findPhoneNumbers_\"));\n\nvar _parsePhoneNumber = require(\"./parsePhoneNumber\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; return newObj; } }\n\n// This is a legacy function.\n// Use `findNumbers()` instead.\nfunction findPhoneNumbers() {\n  var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _findPhoneNumbers_[\"default\"])(text, options, metadata);\n}\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\n\nfunction searchPhoneNumbers() {\n  var _normalizeArguments2 = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n      text = _normalizeArguments2.text,\n      options = _normalizeArguments2.options,\n      metadata = _normalizeArguments2.metadata;\n\n  return (0, _findPhoneNumbers_.searchPhoneNumbers)(text, options, metadata);\n}\n//# sourceMappingURL=findPhoneNumbers.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parsePhoneNumberFromString;\n\nvar _parsePhoneNumber_ = _interopRequireDefault(require(\"./parsePhoneNumber_\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _metadata = require(\"./metadata\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !(0, _metadata.isSupportedCountry)(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return (0, _parsePhoneNumber_[\"default\"])(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof _ParseError[\"default\"]) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _LRUCache = _interopRequireDefault(require(\"./LRUCache\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\nvar RegExpCache =\n/*#__PURE__*/\nfunction () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n\n    this.cache = new _LRUCache[\"default\"](size);\n  }\n\n  _createClass(RegExpCache, [{\n    key: \"getPatternForRegExp\",\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n\n      return regExp;\n    }\n  }]);\n\n  return RegExpCache;\n}();\n\nexports[\"default\"] = RegExpCache;\n//# sourceMappingURL=RegExpCache.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValidCandidate;\nexports.LEAD_CLASS = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar _util = require(\"./util\");\n\nvar _utf = require(\"./utf-8\");\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nvar LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(_constants.PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nexports.LEAD_CLASS = LEAD_CLASS;\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = (0, _util.limit)(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\n\nfunction isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if ((0, _utf.isInvalidPunctuationSymbol)(previousChar) || (0, _utf.isLatinLetter)(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if ((0, _utf.isInvalidPunctuationSymbol)(nextChar) || (0, _utf.isLatinLetter)(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findNumbers;\n\nvar _PhoneNumberMatcher = _interopRequireDefault(require(\"./PhoneNumberMatcher\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction findNumbers(text, options, metadata) {\n  var matcher = new _PhoneNumberMatcher[\"default\"](text, options, metadata);\n  var results = [];\n\n  while (matcher.hasNext()) {\n    results.push(matcher.next());\n  }\n\n  return results;\n}\n//# sourceMappingURL=findNumbers_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = searchNumbers;\n\nvar _parsePhoneNumber = require(\"./parsePhoneNumber\");\n\nvar _PhoneNumberMatcher = _interopRequireDefault(require(\"./PhoneNumberMatcher\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nfunction searchNumbers() {\n  var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  var matcher = new _PhoneNumberMatcher[\"default\"](text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}\n//# sourceMappingURL=searchNumbers.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parsePhoneNumberFromString;\n\nvar _parsePhoneNumber = require(\"./parsePhoneNumber\");\n\nvar _parsePhoneNumberFromString_ = _interopRequireDefault(require(\"./parsePhoneNumberFromString_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction parsePhoneNumberFromString() {\n  var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _parsePhoneNumberFromString_[\"default\"])(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.containsMoreThanOneSlashInNationalNumber = containsMoreThanOneSlashInNationalNumber;\nexports[\"default\"] = void 0;\n\nvar _validate_ = _interopRequireDefault(require(\"../validate_\"));\n\nvar _parseDigits = _interopRequireDefault(require(\"../parseDigits\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\nvar _default = {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!(0, _validate_[\"default\"])(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!(0, _validate_[\"default\"])(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!(0, _validate_[\"default\"])(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\nexports[\"default\"] = _default;\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if ((0, _parseDigits[\"default\"])(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nfunction containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && (0, _util.endsWith)(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return (0, _util.startsWith)(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parseNumber;\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nvar _parsePhoneNumber = require(\"./parsePhoneNumber\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nfunction parseNumber() {\n  var _normalizeArguments = (0, _parsePhoneNumber.normalizeArguments)(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return (0, _parse_[\"default\"])(text, options, metadata);\n}\n//# sourceMappingURL=parse.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchesEntirely = matchesEntirely;\nexports.mergeArrays = mergeArrays;\n\n/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nfunction matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\n\nfunction mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b)\n  // {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _metadata2 = _interopRequireDefault(require(\"./metadata\"));\n\nvar _isPossibleNumber_ = _interopRequireDefault(require(\"./isPossibleNumber_\"));\n\nvar _validate_ = _interopRequireDefault(require(\"./validate_\"));\n\nvar _isValidNumberForRegion_ = _interopRequireDefault(require(\"./isValidNumberForRegion_\"));\n\nvar _getNumberType_ = _interopRequireDefault(require(\"./getNumberType_\"));\n\nvar _format_ = _interopRequireDefault(require(\"./format_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber =\n/*#__PURE__*/\nfunction () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    var _metadata = new _metadata2[\"default\"](metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"isPossible\",\n    value: function isPossible() {\n      return (0, _isPossibleNumber_[\"default\"])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return (0, _validate_[\"default\"])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new _metadata2[\"default\"](this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return (0, _getNumberType_[\"default\"])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return (0, _format_[\"default\"])(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexports[\"default\"] = PhoneNumber;\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRFC3966 = parseRFC3966;\nexports.formatRFC3966 = formatRFC3966;\n\nvar _isViablePhoneNumber = _interopRequireDefault(require(\"./isViablePhoneNumber\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!(0, _isViablePhoneNumber[\"default\"])(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\n\nfunction formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getNumberType;\nexports.is_of_type = is_of_type;\nexports.checkNumberLengthForType = checkNumberLengthForType;\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nfunction getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new _metadata[\"default\"](metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!(0, _util.matchesEntirely)(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var _type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (is_of_type(nationalNumber, _type, metadata)) {\n      return _type;\n    }\n  }\n}\n\nfunction is_of_type(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return (0, _util.matchesEntirely)(nationalNumber, type.pattern());\n} // Should only be called for the \"new\" metadata which has \"possible lengths\".\n\n\nfunction checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = (0, _util.mergeArrays)(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths)\n      // {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // }\n      // else\n      // {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValidPreCandidate;\n// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\n\nfunction isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = formatIncompletePhoneNumber;\n\nvar _AsYouType = _interopRequireDefault(require(\"./AsYouType\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nfunction formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new _AsYouType[\"default\"](country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","// Deprecated.\r\n// Use `libphonenumber-js/min` or `libphonenumber-js/max` or `libphonenumber-js/core` instead.\r\n\r\n'use strict'\r\n\r\nvar parsePhoneNumberFromString = require('./build/parsePhoneNumberFromString').default\r\n\r\n// ES5 `require()` \"default\" \"interoperability\" hack.\r\n// https://github.com/babel/babel/issues/2212#issuecomment-131827986\r\n// An alternative approach:\r\n// https://www.npmjs.com/package/babel-plugin-add-module-exports\r\nexports = module.exports = parsePhoneNumberFromString\r\nexports['default'] = parsePhoneNumberFromString\r\n\r\nexports.ParseError = require('./build/ParseError').default\r\nvar parsePhoneNumberWithError = require('./build/parsePhoneNumber').default\r\n// `parsePhoneNumber()` named export has been renamed to `parsePhoneNumberWithError()`.\r\nexports.parsePhoneNumber = parsePhoneNumberWithError\r\nexports.parsePhoneNumberWithError = parsePhoneNumberWithError\r\n\r\n// `parsePhoneNumberFromString()` named export is now considered legacy:\r\n// it has been promoted to a default export due to being too verbose.\r\nexports.parsePhoneNumberFromString = parsePhoneNumberFromString\r\n\r\n// Deprecated: remove `parse()` export in 2.0.0.\r\n// (renamed to `parseNumber()`)\r\nexports.parse              = require('./build/parse').default\r\nexports.parseNumber        = require('./build/parse').default\r\n// Deprecated: remove `format()` export in 2.0.0.\r\n// (renamed to `formatNumber()`)\r\nexports.format             = require('./build/format').default\r\nexports.formatNumber       = require('./build/format').default\r\nexports.getNumberType      = require('./build/getNumberType').default\r\nexports.getExampleNumber   = require('./build/getExampleNumber').default\r\nexports.isPossibleNumber   = require('./build/isPossibleNumber').default\r\nexports.isValidNumber      = require('./build/validate').default\r\nexports.isValidNumberForRegion = require('./build/isValidNumberForRegion').default\r\n\r\nexports.findNumbers        = require('./build/findNumbers').default\r\nexports.searchNumbers      = require('./build/searchNumbers').default\r\nexports.findPhoneNumbersInText = require('./build/findPhoneNumbersInText').default\r\nexports.searchPhoneNumbersInText = require('./build/searchPhoneNumbersInText').default\r\nexports.PhoneNumberMatcher = require('./build/PhoneNumberMatcher').default\r\n\r\n// Deprecated.\r\nexports.findPhoneNumbers   = require('./build/findPhoneNumbers').default\r\nexports.searchPhoneNumbers = require('./build/findPhoneNumbers').searchPhoneNumbers\r\nexports.PhoneNumberSearch  = require('./build/findPhoneNumbers_').PhoneNumberSearch\r\n\r\nexports.AsYouType = require('./build/AsYouType').default\r\n\r\nexports.formatIncompletePhoneNumber = require('./build/formatIncompletePhoneNumber').default\r\nexports.parseIncompletePhoneNumber  = require('./build/parseIncompletePhoneNumber').default\r\nexports.parsePhoneNumberCharacter   = require('./build/parseIncompletePhoneNumber').parsePhoneNumberCharacter\r\nexports.parseDigits   = require('./build/parseDigits').default\r\n\r\n// Deprecated: `DIGITS` were used by `react-phone-number-input`.\r\n// Replaced by `parseDigits()`.\r\n//\r\n// Deprecated: `DIGIT_PLACEHOLDER` was used by `react-phone-number-input`.\r\n// Not used anymore.\r\n//\r\nexports.DIGITS            = require('./build/parseDigits').DIGITS\r\nexports.DIGIT_PLACEHOLDER = require('./build/AsYouType').DIGIT_PLACEHOLDER\r\n\r\nexports.getCountries = require('./build/getCountries').default\r\nexports.getCountryCallingCode = require('./build/getCountryCallingCode').default\r\n// `getPhoneCode` name is deprecated, use `getCountryCallingCode` instead.\r\nexports.getPhoneCode = exports.getCountryCallingCode\r\n\r\nexports.Metadata = require('./build/metadata').default\r\nexports.isSupportedCountry = require('./build/metadata').isSupportedCountry\r\nexports.getExtPrefix = require('./build/metadata').getExtPrefix\r\n\r\nexports.parseRFC3966 = require('./build/RFC3966').parseRFC3966\r\nexports.formatRFC3966 = require('./build/RFC3966').formatRFC3966\r\n\r\n// exports['default'] = ...","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isPossiblePhoneNumber;\nexports.isPossibleNumber = isPossibleNumber;\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _getNumberType_ = require(\"./getNumberType_\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new _metadata[\"default\"](metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, undefined, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\n\nfunction isPossibleNumber(nationalNumber, isInternational, metadata) {\n  switch ((0, _getNumberType_.checkNumberLengthForType)(nationalNumber, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PLUS_CHARS = exports.VALID_PUNCTUATION = exports.WHITESPACE = exports.VALID_DIGITS = exports.MAX_LENGTH_COUNTRY_CODE = exports.MAX_LENGTH_FOR_NSN = exports.MIN_LENGTH_FOR_NSN = void 0;\n// The minimum length of the national significant number.\nvar MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexports.MIN_LENGTH_FOR_NSN = MIN_LENGTH_FOR_NSN;\nvar MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexports.MAX_LENGTH_FOR_NSN = MAX_LENGTH_FOR_NSN;\nvar MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexports.MAX_LENGTH_COUNTRY_CODE = MAX_LENGTH_COUNTRY_CODE;\nvar VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nexports.VALID_DIGITS = VALID_DIGITS;\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nvar WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nexports.WHITESPACE = WHITESPACE;\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nvar VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexports.VALID_PUNCTUATION = VALID_PUNCTUATION;\nvar PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n\nexports.PLUS_CHARS = PLUS_CHARS;\n//# sourceMappingURL=constants.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValidNumber;\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _util = require(\"./util\");\n\nvar _getNumberType_ = _interopRequireDefault(require(\"./getNumberType_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nfunction isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new _metadata[\"default\"](metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return (0, _getNumberType_[\"default\"])(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return (0, _util.matchesEntirely)(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parseIncompletePhoneNumber;\nexports.parsePhoneNumberCharacter = parsePhoneNumberCharacter;\n\nvar _parseDigits = require(\"./parseDigits\");\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\nfunction parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * `input-format` `parse()` function.\r\n * https://gitlab.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\n\nfunction parsePhoneNumberCharacter(character, value) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (value) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return (0, _parseDigits.parseDigit)(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parsePreCandidate;\n\nvar _util = require(\"./util\");\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nfunction parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return (0, _util.trimAfterFirstMatch)(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parsePhoneNumber;\n\nvar _parse_ = _interopRequireDefault(require(\"./parse_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction parsePhoneNumber(text, options, metadata) {\n  return (0, _parse_[\"default\"])(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValidNumberForRegion;\n\nvar _validate_ = _interopRequireDefault(require(\"./validate_\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\nfunction isValidNumberForRegion(input, country, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  return input.country === country && (0, _validate_[\"default\"])(input, options, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion_.js.map"],"sourceRoot":""}